<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王涛的博客</title>
  
  <subtitle>wangtao</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.itnwork.com/"/>
  <updated>2019-03-15T07:02:18.699Z</updated>
  <id>https://www.itnwork.com/</id>
  
  <author>
    <name>wangtao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo+github最新最完整的建站过程</title>
    <link href="https://www.itnwork.com/archives/85cb8b79.html"/>
    <id>https://www.itnwork.com/archives/85cb8b79.html</id>
    <published>2019-03-12T00:08:08.000Z</published>
    <updated>2019-03-15T07:02:18.699Z</updated>
    
    <content type="html"><![CDATA[<p><a name="e204c251"></a></p><h1 id="一、注册github账号"><a href="#一、注册github账号" class="headerlink" title="一、注册github账号"></a>一、注册github账号</h1><p><a href="https://github.com/join" target="_blank" rel="noopener">github注册地址</a></p><p>另外github支持当前版本的Chrome、Firefox、Safari和Microsoft Edge。</p><p>填写注册信息：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552342983814-decc6633-5fdb-41a8-9af1-c0571aaa2a90.png#align=left&amp;display=inline&amp;height=743&amp;name=image.png&amp;originHeight=928&amp;originWidth=862&amp;size=80387&amp;status=done&amp;width=690" alt="image.png"></p><p>其中Username为你github账户的名字，取完之后就改不了了。</p><p>Email address为你的邮箱地址。</p><p>Password设置你的密码。</p><p>然后点击验证，Create an account.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343126402-dd262640-f513-4ce3-b70a-1aedbe840adf.png#align=left&amp;display=inline&amp;height=686&amp;name=image.png&amp;originHeight=858&amp;originWidth=835&amp;size=92208&amp;status=done&amp;width=668" alt="image.png"><br>继续Continue,<br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343412568-705b5510-4611-4517-8bf4-3f1cd0b514b7.png#align=left&amp;display=inline&amp;height=543&amp;name=image.png&amp;originHeight=679&amp;originWidth=886&amp;size=63957&amp;status=done&amp;width=709" alt="image.png"><br>这一步你可以选择跳过，也可以根据你的情况选择一下submit。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343492831-797bc009-bd60-4e1a-b96d-0663f0d24204.png#align=left&amp;display=inline&amp;height=284&amp;name=image.png&amp;originHeight=355&amp;originWidth=768&amp;size=43915&amp;status=done&amp;width=614" alt="image.png"><br>然后确认下你的邮箱；</p><p>确认完后登录到你的github页面。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343688445-29f56ead-7174-4ed7-9aea-08ad08e5a7b3.png#align=left&amp;display=inline&amp;height=529&amp;name=image.png&amp;originHeight=661&amp;originWidth=1907&amp;size=130256&amp;status=done&amp;width=1526" alt="image.png"><br>点击Your repositories<br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343772452-c6402994-17d3-4fba-a198-df4d036987bd.png#align=left&amp;display=inline&amp;height=390&amp;name=image.png&amp;originHeight=487&amp;originWidth=997&amp;size=43328&amp;status=done&amp;width=798" alt="image.png"></p><p><a name="1df9ac96"></a></p><h1 id="二、创建github-pages"><a href="#二、创建github-pages" class="headerlink" title="二、创建github pages"></a>二、创建github pages</h1><p>点击New，新建一个仓库。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343884188-1adc8bf7-969f-4fd0-99a4-06edc85fd704.png#align=left&amp;display=inline&amp;height=463&amp;name=image.png&amp;originHeight=579&amp;originWidth=779&amp;size=56936&amp;status=done&amp;width=623" alt="image.png"></p><p>Repository name必须是这种格式 <code>xxxx.github.io</code>。</p><p>xxxx为你刚刚注册github账号的名字。</p><p>点击Create repository后，跳转到下面这个页面。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552344010670-305b58c0-8c1d-4ab3-8e91-f301e8361d04.png#align=left&amp;display=inline&amp;height=459&amp;name=image.png&amp;originHeight=574&amp;originWidth=1003&amp;size=57563&amp;status=done&amp;width=802" alt="image.png"></p><p>点击Settings 。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552344154212-99e1a683-dac3-4dbd-96d8-d0404f530051.png#align=left&amp;display=inline&amp;height=492&amp;name=image.png&amp;originHeight=614&amp;originWidth=762&amp;size=55288&amp;status=done&amp;width=610" alt="image.png"><br>至此你的github静态页面存储库就创建成功了。不防点下你的新建的网址，<code>https://your_github_repostoriesName.github.io</code> 试试看。</p><p><a name="e89dec64"></a></p><h1 id="三、本地连接GitHub"><a href="#三、本地连接GitHub" class="headerlink" title="三、本地连接GitHub"></a>三、本地连接GitHub</h1><p><a name="61b56dbf"></a></p><h2 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a><strong>生成SSH添加到GitHub</strong></h2><p>现在我们需要在本地配置下git，让它能连接到Github仓库。</p><p><code>git config --global user.name &quot;yourname&quot;</code></p><p><code>git config --global user.email &quot;youremail&quot;</code><br><br><br>例如我的：</p><p><code>git config --global user.name &quot;doerteacher&quot;</code>，注册github的账号名称。</p><p><code>git config --global user.email &quot;xxxxxxx@qq.com&quot;</code>,注册github的邮箱。</p><p>然后创建ssh，一路回车。</p><p><strong>ssh-keygen -t rsa -C “youremail”</strong></p><p>默认生成ssh key在C:\Users\电脑用户名\ .ssh文件夹下。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552348195482-5a351223-f384-4757-9802-a9ec791b7c87.png#align=left&amp;display=inline&amp;height=80&amp;name=image.png&amp;originHeight=100&amp;originWidth=320&amp;size=4356&amp;status=done&amp;width=256" alt="image.png"></p><p>然后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code>把你id_rsa.pub里面的信息复制进去。</p><p>点击Setting，进入SSH and GPG keys页面。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552348293842-40f2c8b7-669d-48a9-a7c6-b0ad8f1d8009.png#align=left&amp;display=inline&amp;height=544&amp;name=image.png&amp;originHeight=680&amp;originWidth=1575&amp;size=107304&amp;status=done&amp;width=1260" alt="image.png"><br>点击SSH and GPG keys，然后点击New SSH key。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552348350591-c9bc23fe-13c8-47ae-820e-f7692ece0c69.png#align=left&amp;display=inline&amp;height=481&amp;name=image.png&amp;originHeight=601&amp;originWidth=1077&amp;size=50769&amp;status=done&amp;width=862" alt="image.png"><br>Title随便起个名，比如blog。把id_rsa.pub里面的信息复制到Key里面。<br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552348382771-e47ae0ce-2eeb-468d-9d29-56bed3a0c01c.png#align=left&amp;display=inline&amp;height=459&amp;name=image.png&amp;originHeight=574&amp;originWidth=1106&amp;size=43953&amp;status=done&amp;width=885" alt="image.png"></p><p>然后输入</p><p><strong>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></strong></p><p>检测下是否配置成功。</p><p>然后会得到如下信息，证明你配置成功了。<br><br>Hi DoerTeacher! You’ve successfully authenticated, but GitHub does not provide shell access. </p><p><a name="95a104f2"></a></p><h1 id="四、Hexo创建"><a href="#四、Hexo创建" class="headerlink" title="四、Hexo创建"></a>四、Hexo创建</h1><p><a name="f3b79a1d"></a></p><h2 id="Hexo创建前环境准备"><a href="#Hexo创建前环境准备" class="headerlink" title="Hexo创建前环境准备"></a>Hexo创建前环境准备</h2><p><a name="e4f8a1ca"></a></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载Git</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552344804893-25d65ea4-ec7f-4bd4-8e27-ae6e2c05d17d.png#align=left&amp;display=inline&amp;height=496&amp;name=image.png&amp;originHeight=620&amp;originWidth=668&amp;size=116395&amp;status=done&amp;width=534" alt="image.png"></p><p>基于你电脑的系统自行选择下载哪个版本。</p><p>如果不会Git怎么安装的话，网上自己搜索下Git具体安装步骤。</p><p><a name="abaa35be"></a></p><h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">nodejs下载</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552345110497-7134da09-06a1-47ad-89b6-98c2dff03301.png#align=left&amp;display=inline&amp;height=555&amp;name=image.png&amp;originHeight=694&amp;originWidth=1267&amp;size=128873&amp;status=done&amp;width=1014" alt="image.png"></p><p>基于你电脑的系统自行选择下载哪个版本。</p><p>如果不会nodejs怎么安装的话，网上自己搜索下Git具体安装步骤。</p><p>安装完后，打开cmd工具,输入<code>node -v</code> 检测下安装的版本。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552345398313-13b77c10-5438-4dd4-8b13-9a2ef4831201.png#align=left&amp;display=inline&amp;height=89&amp;name=image.png&amp;originHeight=111&amp;originWidth=591&amp;size=7537&amp;status=done&amp;width=473" alt="image.png"></p><p>至此nodejs安装完毕。</p><p>接下来就可以真正安装hexo了。</p><p><a name="fbe3b6b3"></a></p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>首先在自己电脑的D盘，建个存储Hexo文件的文件夹。</p><p>例如我在D盘user文件夹下新建了个Hexo文件夹：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552345908358-a37420e3-9682-4612-bd3a-5e554d102952.png#align=left&amp;display=inline&amp;height=103&amp;name=image.png&amp;originHeight=128&amp;originWidth=327&amp;size=4484&amp;status=done&amp;width=262" alt="image.png"><br><a name="d41d8cd9"></a></p><p>##<br>然后打开自己电脑的Git Bash</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346031892-0997d4c2-c2a5-43a3-a7bf-ce4579b0fe81.png#align=left&amp;display=inline&amp;height=78&amp;name=image.png&amp;originHeight=98&amp;originWidth=118&amp;size=12274&amp;status=done&amp;width=94" alt="image.png"></p><p>然后cd到Hexo文件夹下，输入 <code>npm install -g hexo-cli</code>，安装hexo。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346176052-0a17db11-f194-4df0-bcfa-f6cd368aac22.png#align=left&amp;display=inline&amp;height=359&amp;name=image.png&amp;originHeight=449&amp;originWidth=745&amp;size=26094&amp;status=done&amp;width=596" alt="image.png"></p><p>输入<code>hexo -v</code>，看下hexo当前版本</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346440128-eb6e89a3-d948-4385-a845-ad8f1bd25da7.png#align=left&amp;display=inline&amp;height=253&amp;name=image.png&amp;originHeight=316&amp;originWidth=562&amp;size=23636&amp;status=done&amp;width=450" alt="image.png"></p><p>然后初始化hexo</p><p><code>hexo init blog</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346588851-ef64b589-3fbf-497a-b229-0227e09bf248.png#align=left&amp;display=inline&amp;height=259&amp;name=image.png&amp;originHeight=324&amp;originWidth=604&amp;size=51696&amp;status=done&amp;width=483" alt="image.png"></p><p>然后cd到刚刚初始化的blog文件夹下。<br><code>cd blog/</code><br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346715431-3a546a4d-2cef-45b5-81dc-aae4c867a60d.png#align=left&amp;display=inline&amp;height=107&amp;name=image.png&amp;originHeight=134&amp;originWidth=566&amp;size=15309&amp;status=done&amp;width=453" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346642493-c800511e-3057-498c-8ab5-9bfa686eed3e.png#align=left&amp;display=inline&amp;height=248&amp;name=image.png&amp;originHeight=310&amp;originWidth=344&amp;size=16644&amp;status=done&amp;width=275" alt="image.png"></p><p>这时你会发现新建了这么几个文件。</p><p>然后安装npm 依赖项。</p><p><code>npm install</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346838820-534ee804-7a45-4eb4-b26c-cc5c2ab4cfc5.png#align=left&amp;display=inline&amp;height=159&amp;name=image.png&amp;originHeight=199&amp;originWidth=736&amp;size=26801&amp;status=done&amp;width=589" alt="image.png"></p><p>然后<code>hexo g</code>，生成静态文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552346971701-78ce54f9-f446-486c-8e87-d893285c2ec2.png#align=left&amp;display=inline&amp;height=170&amp;name=image.png&amp;originHeight=212&amp;originWidth=531&amp;size=27308&amp;status=done&amp;width=425" alt="image.png"></p><p>然后 <code>ls</code>,你会发现多了<code>public</code>文件夹，这就是生成的静态文件页面。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552347015283-9a8a60dd-7f6c-4f27-b4dd-3871d2413364.png#align=left&amp;display=inline&amp;height=76&amp;name=image.png&amp;originHeight=95&amp;originWidth=639&amp;size=11345&amp;status=done&amp;width=511" alt="image.png"></p><p>然后 <strong>hexo server</strong> 启动服务器。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552347108693-bbbaf94d-41a4-4201-be5a-cd8ebb1369cf.png#align=left&amp;display=inline&amp;height=76&amp;name=image.png&amp;originHeight=95&amp;originWidth=676&amp;size=10764&amp;status=done&amp;width=541" alt="image.png"></p><p>访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552347171072-af25c97e-fe4f-44c3-be02-cb47c1b0e1d6.png#align=left&amp;display=inline&amp;height=778&amp;name=image.png&amp;originHeight=973&amp;originWidth=1354&amp;size=343524&amp;status=done&amp;width=1083" alt="image.png"></p><p>然后就进入了hello world的页面。</p><p>这时就代表了你的hexo安装完成了。</p><p>前面我们已经在github上建了存储静态页面的仓库并配置了本地连接Github。</p><p>然后我们就可以把hexo生成的页面部署到github上了。</p><p><a name="ce7c9c65"></a></p><h1 id="五、将hexo部署到GitHub"><a href="#五、将hexo部署到GitHub" class="headerlink" title="五、将hexo部署到GitHub"></a>五、<strong>将hexo部署到GitHub</strong></h1><p>打开站点配置文件 <code>_config.yml</code>，在刚才生成的blog目录下。<br><br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552349295804-1380d08e-58dd-4481-96e2-772e3d56bfd4.png#align=left&amp;display=inline&amp;height=228&amp;name=image.png&amp;originHeight=285&amp;originWidth=349&amp;size=15724&amp;status=done&amp;width=279" alt="image.png"><br><br><br>在_config.yml最下面，找到deploy：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552349418958-e4538a71-9b03-4145-ac1b-260d1d88d35b.png#align=left&amp;display=inline&amp;height=704&amp;name=image.png&amp;originHeight=880&amp;originWidth=1092&amp;size=86598&amp;status=done&amp;width=874" alt="image.png"><br>修改为<br><br><br></p><pre><code>deploy:                                                                                                                                                                   type: git                                                                                                                                                            repository: git@github.com:DoerTeacher/doerteacher.github.io.git     branch: master</code></pre><p>DoerTeacher就是我的GitHub账户名，你得改成你自己的。</p><p>repository地址也可以到自己GitHub账户的仓库下复制。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552349934196-9e3c5ea9-b9f5-40ba-b87a-01af2988f52f.png#align=left&amp;display=inline&amp;height=524&amp;name=image.png&amp;originHeight=655&amp;originWidth=1018&amp;size=77292&amp;status=done&amp;width=814" alt="image.png"></p><p>然后安装 部署到github插件的依赖<br><br><br><strong><code>npm install hexo-deployer-git --save</code></strong><br><br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552350137456-e839299a-1014-422a-8ba6-721987b0b97c.png#align=left&amp;display=inline&amp;height=196&amp;name=image.png&amp;originHeight=245&amp;originWidth=707&amp;size=36508&amp;status=done&amp;width=566" alt="image.png"><br><br><br>这个时候就可以开始真正地将hexo部署到github上了。<br><br><br><strong>hexo deploy</strong><br><br><br><br>然后就可以在<code>http://doerteacher.github.io</code> ，访问你自己的博客了。</p><p>其中<code>doerteacher.github.io</code>为你之前创建的Repository Name。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552343884188-1adc8bf7-969f-4fd0-99a4-06edc85fd704.png#align=left&amp;display=inline&amp;height=554&amp;originHeight=579&amp;originWidth=779&amp;status=done&amp;width=746" alt></p><p>然后你就可以看到这样的页面了。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/286890/1552350719207-e400f3de-9ab8-4675-b7a2-4cdc1cab028b.png#align=left&amp;display=inline&amp;height=747&amp;name=image.png&amp;originHeight=934&amp;originWidth=1920&amp;size=438949&amp;status=done&amp;width=1536" alt="image.png"></p><p>至于hexo的使用、添加评论功能、绑定自定义域名，以及自动化集成部署我将会在下一篇博文中完整地整理出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;e204c251&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、注册github账号&quot;&gt;&lt;a href=&quot;#一、注册github账号&quot; class=&quot;headerlink&quot; title=&quot;一、注册github账号&quot;&gt;&lt;/a&gt;一、注册github账号&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="工具" scheme="https://www.itnwork.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="https://www.itnwork.com/tags/hexo/"/>
    
      <category term="github" scheme="https://www.itnwork.com/tags/github/"/>
    
      <category term="建站" scheme="https://www.itnwork.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>万网DNS与其他云解析系统比较</title>
    <link href="https://www.itnwork.com/archives/f21a6563.html"/>
    <id>https://www.itnwork.com/archives/f21a6563.html</id>
    <published>2019-03-08T11:18:57.000Z</published>
    <updated>2019-03-15T07:02:18.699Z</updated>
    
    <content type="html"><![CDATA[<p>注册域名以后，您只拥有了这个域名的使用权，但无法通过域名直接访问您的网站，或作为电子邮箱后缀进行邮件收发。原因在于，域名只是为了方便记忆而专门建立的一套地址转换系统，要访问一台互联网上的服务器，必须通过 IP 地址来实现。而域名解析就是将域名指向 IP 地址的过程。“域名解析”是使用域名的必备环节。</p><p>您需要选择优秀的服务商，确保您的域名在解析过程中拥有稳定、快速、安全的服务保障，从而获得最佳的服务器访问体验。</p><h1 id="一、什么是万网云解析？"><a href="#一、什么是万网云解析？" class="headerlink" title="一、什么是万网云解析？"></a>一、什么是万网云解析？</h1><p>万网云解析是万网 DNS 系统面向全网域名升级开放的免费智能域名解析服务，提供稳定、安全、极速的域名解析能力，支持非万网域名海外 IP 解析，且全部功能免费使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、稳定，99.99% 服务可用率。阿里强大的网络基础设施布局，独享多线 BGP 的多机房集群自动宕机迁移，系统性能监测实时报警，让每一次访问使命必达！</span><br><span class="line"></span><br><span class="line">2、安全，拥有淘宝级防护能力。阿里自主研发的超百 G 流量清洗中心，可对攻击行为迅速做出判断跟踪，并按照预案进行处理，确保域名解析服务稳定可靠！</span><br><span class="line"></span><br><span class="line">3、极速，解析实时生效。域名解析记录实时更新，自动判断访问用户来自联通、电信、移动、教育易用，强大功能轻松体验。直观简捷的操作面板与友好的功能提示，人性化解析设置操作零成本上手，随时启动云解析的强大功能！</span><br><span class="line"></span><br><span class="line">4、平滑，解析切换无感知。域名添加成功后，即可预设解析记录，一旦 DNS 更换生效，解析服务平滑切换，访问体验不中断！</span><br></pre></td></tr></table></figure><h1 id="二、万网域名解析的优势"><a href="#二、万网域名解析的优势" class="headerlink" title="二、万网域名解析的优势"></a>二、万网域名解析的优势</h1><p>来自 DailyChange 的权威第三方数据统计显示，万网云解析是国内域名解析市场第一的服务提供商，拥有最多的域名解析保有量。基于万网 19 年的稳定解析服务保障，以及阿里的技术能力与网络基础设施布局，超过 300 万域名用户正在使用万网云解析。</p><p>万网云解析提供了 99.99% 的服务可用率保证，拥有淘宝级的安全防护能力，以及实时解析生效，确保稳定、安全、极速的解析能力；支持高质量的电信、联通、移动、教育网和海外的多线智能解析，获得最流畅的访问体验；全部功能均免费面向所有用户提供。</p><p>新版万网云解析升级发布，开放支持非万网域名以及海外 IP 解析。</p><h1 id="域名注册商提供的免费服务"><a href="#域名注册商提供的免费服务" class="headerlink" title="域名注册商提供的免费服务"></a>域名注册商提供的免费服务</h1><p>Godaddy：不在Godaddy注册域名，也可以使用Godaddy的域名解析服务，使用方法很简单，登录Godaddy网站后，点击“Add Off-site DNS”即可添加用户的域名，之后将用户域名的DNS设置为Godaddy指定的地址，域名DNS生效后，即可点击添加的域名进行DNS解析设置。</p><p>NameCheap：知名的域名注册商NameCheap也和Godaddy一样，提供免费DNS域名解析，点击“FreeDNS”后，即可添加用户域名，用户可以通过修改DNS或域名邮件来验证自己的域名，NameCheap的解析服务支持的功能有：网址转发（可隐藏原URL、支持301重定向）、邮件转发、A记录、CNAME别名记录、MX邮件记录、TXT文本记录、NS记录、AAAA记录（IPV6）、动态域名解析等等。</p><h1 id="国内免费域名解析服务"><a href="#国内免费域名解析服务" class="headerlink" title="国内免费域名解析服务"></a>国内免费域名解析服务</h1><p>DNSPod：DNSPod是国内运营较久的免费DNS解析服务，除了免费服务外，还提供多项收费服务。DNSPod的功能较多，支持电信、网通、教育网双线或者三线智能DNS解析，在中国国内解析速度较快，但对于国外的Google爬虫来说经常出现无法访问的情况。</p><p>DNS.La：也是类似DNSPod的免费DNS解析服务，可以为同时有电信、联通、教育网服务器的网站提供免费智能DNS的解析。</p><p>EDNS：易名中国提供的免费域名解析服务，非易名中国用户也可使用。</p><h1 id="国外免费域名解析服务"><a href="#国外免费域名解析服务" class="headerlink" title="国外免费域名解析服务"></a>国外免费域名解析服务</h1><p>ZoneEdit：美国著名的老牌免费域名DNS解析服务，成立于1999年。免费帐户最多可添加5个域名。解析类型：A记录、AAAA记录、 TXT文本记录、LOC记录、PTR记录、CNAME别名记录、MX邮件记录、网址转发、邮件转发等。界面超级简洁，速度快，稳定。</p><p>HE.NET：是美国老牌IDC，成立于1994年，在技术领域比较强，尤其是IPV6应用。这个免费DNS解析服务最多可以添加50个域名，可以设置A记录、AAAA记录、CNAME别名记录、MX邮件记录、NS记录、TXT记录、SRV记录。</p><p>FreeDNS：一家美国免费域名DNS解析服务网站，界面简洁，注册简单，支持添加任何后缀的域名，支持Google Apps服务。免费域名DNS解析服务有三种模式：简单模式可直接设置IP指向、转发模式可设置301永久重定向和302临时重定向、高级模式可设置A记录、AAAA记录、CNAME记录、MX记录、PTR记录、TXT记录。</p><p>afraid：美国一家免费域名解析服务，运营了相当长的时间了，值得提醒的是按照官方规定六个月账号必须有一次登录，否则账号会被锁定 。</p><h1 id="CDN服务自带域名解析"><a href="#CDN服务自带域名解析" class="headerlink" title="CDN服务自带域名解析"></a>CDN服务自带域名解析</h1><p>CloudFlare：虽然它的主营业务是CDN（Anycast），但丝毫不影响它作为免费DNS的声誉，况且这个免费DNS是真的全球分布（12个节点），且使用了CDN技术。</p><p>百度加速乐：加速乐也主要是CDN业务，顺带提供DNS域名解析，提供抗CC攻击、免费DNS解析、免费分省解析、防黑客攻击、黑链暗链防护、页面篡改防护服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注册域名以后，您只拥有了这个域名的使用权，但无法通过域名直接访问您的网站，或作为电子邮箱后缀进行邮件收发。原因在于，域名只是为了方便记忆而专门建立的一套地址转换系统，要访问一台互联网上的服务器，必须通过 IP 地址来实现。而域名解析就是将域名指向 IP 地址的过程。“域名解
      
    
    </summary>
    
      <category term="工具" scheme="https://www.itnwork.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="DNS" scheme="https://www.itnwork.com/tags/DNS/"/>
    
      <category term="云解析" scheme="https://www.itnwork.com/tags/%E4%BA%91%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>二月二龙抬头</title>
    <link href="https://www.itnwork.com/archives/c40fbf14.html"/>
    <id>https://www.itnwork.com/archives/c40fbf14.html</id>
    <published>2019-03-08T09:12:12.000Z</published>
    <updated>2019-03-15T07:02:18.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/286890/1552358363364-b2729cb6-6c95-443f-b46f-5e31d39e2980.jpeg" width="100%"><br><a id="more"></a><br>18年已经过去两个月了，我翻开笔记本，看着我一年的晨间日记，还有那几个小目标，陷入了沉思。</p><p>很久之前都想对去年做个总结，对今年做下展望，由于惰性，一直拖到现在才来开始做。</p><p>对于19年我的愿望是什么，我一直在问我自己。</p><p>最后通过对过去不断地总结我发现，我19年的最大愿望，就是继续完成18年未完成的愿望。</p><p>回顾2018，做的对的几件大事：</p><pre><code>一直把学习放在第一位；对于错误的方向果断的放下；自修能量改变自己；</code></pre><p>做的错的几件事情：</p><pre><code>低谷的时候不能沉迷，没能站高一线，看待全局；我过去成功的经验，反而成了我上半年道路上的阻碍；当我在抱怨的时候，有大巴人在偷偷赚大钱；</code></pre><p>对待2019，将要做的三件事：</p><pre><code>1、自修能量改变自己2、珍惜身边关心自己的人3、把抖商做起来。</code></pre><p>对于自己能够不断地自修能量改变自己，我最应该感谢李枝慧，一个见证了我的起起落落，一直陪伴在我左右的人，没有她不会有我现在的改变。</p><p>人只有在你没有势能的时候才能看清人的本质，所以，举杯，庆祝人生的低谷，让你可以认清身边很多风景。</p><p>做事是术，做人是道，道是根本！</p><p>学到影响最深刻的几句话是：</p><pre><code>正念厚德，利众利他格局决定高度，心态决定状态，初心决定未来做好自己，做个好人，用真心换真心脚踏实地，不抄近道言而有信，有诺必践</code></pre><p>有一句金句对我感触很大：我们每年要把自己的能力提升30%，收入至少也要提升30%，如果你能力提升了，收入没有提升，那你需要换圈子！</p><p>经营自己的圈子是多么重要，这一点我最佩服蝉老大，做人他第一，没有之一。</p><p>亿万身家还能做好一个小弟，真的太难了。</p><p>我和他距离还有很多段。</p><p>最近在家里闭关，给2019年布局：</p><pre><code>空杯心态不断学习，体系不断完善；自修——八风吹不动，端坐紫金莲；善待生命中出现的每一个人，因为三世修炼才换今生一次回眸；帮助媳妇搭建一个工大流量池；带父母出去旅行一次；多认识10个朋友；保持锻炼；</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2019/jpeg/286890/1552358363364-b2729cb6-6c95-443f-b46f-5e31d39e2980.jpeg&quot; width=&quot;100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="https://www.itnwork.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="规划" scheme="https://www.itnwork.com/tags/%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="https://www.itnwork.com/archives/e598dc64.html"/>
    <id>https://www.itnwork.com/archives/e598dc64.html</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2019-03-15T07:02:18.699Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (</span><br><span class="line">    small: (</span><br><span class="line">        min-width: null,</span><br><span class="line">        max-width: 479px,</span><br><span class="line">        base-font: 16px,</span><br><span class="line">        vertical-rhythm: 1.3</span><br><span class="line">    ),</span><br><span class="line">    medium: (</span><br><span class="line">        min-width: 480px,</span><br><span class="line">        max-width: 959px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.414</span><br><span class="line">    ),</span><br><span class="line">    large: (</span><br><span class="line">        min-width: 960px,</span><br><span class="line">        max-width: 1099px,</span><br><span class="line">        base-font: 18px,</span><br><span class="line">        vertical-rhythm: 1.5</span><br><span class="line">    ),</span><br><span class="line">    xlarge: (</span><br><span class="line">        min-width: 1100px,</span><br><span class="line">        max-width: null,</span><br><span class="line">        base-font: 21px,</span><br><span class="line">        vertical-rhythm: 1.618</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line">    $min-width: map-get($map, min-width);</span><br><span class="line">    $max-width: map-get($map, max-width);</span><br><span class="line">    $base-font: map-get($map, base-font);</span><br><span class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (</span><br><span class="line">    (small, null, 479px, 16px, 1.3),</span><br><span class="line">    (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line">    (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line">    (xlarge, 1100px, 21px, 1.618)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line">        @if $min-width &#123;</span><br><span class="line">            @include breakpoint( $min-width ) &#123;</span><br><span class="line">                font-size: $base-font;</span><br><span class="line">                line-height: $vertical-rhythm;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; @else &#123;</span><br><span class="line">            font-size: $base-font;</span><br><span class="line">            line-height: $vertical-rhythm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;</span><br><span class="line">    @each $list in $breakpoint-list &#123;</span><br><span class="line">        @if nth($list, 1) == $label &#123;</span><br><span class="line">            @return $list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @return null;</span><br><span class="line">&#125;</span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://www.itnwork.com/tags/css/"/>
    
  </entry>
  
</feed>
